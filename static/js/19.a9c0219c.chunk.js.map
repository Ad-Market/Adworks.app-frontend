{"version":3,"sources":["views/apps/todo/Tasks.js","views/apps/todo/MakePackage.js","views/apps/todo/Sidebar.js","views/apps/todo/TaskSidebar.js","views/apps/todo/index.js","@core/components/repeater/index.js","views/apps/todo/store/actions/index.js"],"names":["Tasks","props","query","tasks","packages","params","dispatch","setSort","getTasks","setQuery","selectTask","updateTask","reOrderTasks","handleTaskSidebar","handleMainSidebar","setPackage","setPackageId","store","useState","stage","setStage","activeList","setActiveLIst","handleTaskClick","obj","storeStage","useEffect","a","toggleList","list","title","id","className","onClick","size","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","value","onChange","e","target","options","wheelPropagation","containerRef","ref","_getBoundingClientRect","getBoundingClientRect","original","height","Math","floor","length","tag","handle","setList","newState","map","item","classnames","completed","isCompleted","style","fontSize","color","width","dueDate","slice","Badge","pill","userNumber","tokenType","budget","_id","Row","Col","md","sm","ListGroup","i","ListGroupItem","active","action","TabContent","activeTab","TabPane","tabId","MakePackage","modal","onToggle","count","setCount","useDispatch","pTitle","setPTitle","pPrice","setPPrice","pType","setPType","number","price","dataArr","setDataArr","updateArr","key","data","tempDataArr","handleMakePackage","toast","info","package","type","issuedDate","Date","makePackage","Modal","isOpen","modalClassName","toggle","ModalBody","Card","CardBody","FormGroup","flex","Label","for","valid","marginLeft","classNamePrefix","isClearable","label","theme","selectThemeColors","Tag","SlideDown","lg","CardText","currentTarget","splice","deleteForm","Button","Ripple","push","ModalFooter","disabled","TodoSidebar","setMainSidebar","mainSidebar","pState","setPState","pId","deletePackage","setStoreStage","isModal","setIsModal","MySwal","withReactContent","Swal","show","ButtonGroup","block","fire","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","error","ModalHeader","children","deleteTask","isObjEmpty","selectedTask","TaskSidebar","open","addTask","setTitle","inpackage","setInPackage","setBudget","setUserNumber","setDueDate","token","setTags","tagOptions","handleResetFields","contentClassName","onOpened","onClosed","Form","onSubmit","preventDefault","name","date","dateFormat","state","outline","renderFooterButtons","TODO","p","openTaskSidebar","setOpenTaskSidebar","useSelector","todo","paramsURL","useParams","q","getPackages","Sidebar","filter","Repeater","component","rest","items","defaultProps","Baseurl","ToastContent","axios","post","res","getTasksC","getProducts","totalNum","task","getState","success","transition","Slide","hideProgressBar","autoClose","taskId","get"],"mappings":"mcA8SeA,EAzRD,SAAAC,GAEX,IACGC,EAgBCD,EAhBDC,MACAC,EAeCF,EAfDE,MACAC,EAcCH,EAdDG,SACAC,EAaCJ,EAbDI,OAEAC,GAWCL,EAZDM,QAYCN,EAXDK,UACAE,EAUCP,EAVDO,SACAC,EASCR,EATDQ,SAEAC,GAOCT,EARDU,WAQCV,EAPDS,YACAE,EAMCX,EANDW,aACAC,EAKCZ,EALDY,kBACAC,EAICb,EAJDa,kBACAC,EAGCd,EAHDc,WACAC,EAECf,EAFDe,aACAC,EACChB,EADDgB,MAEH,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,KAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAGMC,EAAkB,SAAAC,GACrBlB,EAASI,EAAWc,IACpBX,KAEGY,EAAaR,EAAME,MAEzBO,oBAAS,sBAAC,sBAAAC,EAAA,sEACDP,EAASK,EAAWN,OADnB,2CAEP,CAACM,IACJ,IAAMG,EAAU,uCAAG,WAAOC,EAAMC,EAAOC,GAApB,SAAAJ,EAAA,6DACZN,IAAeQ,GAChBP,EAAcO,GAEjBb,EAAae,GAJG,SAKVhB,EAAWe,GALD,uBAMVxB,EAASE,EAASH,IANR,2CAAH,0DAiMhB,OACG,mCACG,sBAAK2B,UAAU,gBAAf,UACG,sBAAKA,UAAU,6CAAf,UACG,qBAAKA,UAAU,uDAAuDC,QAASnB,EAA/E,SACG,cAAC,IAAD,CAAMoB,KAAM,OAEf,qBAAKF,UAAU,4DAAf,SACG,eAACG,EAAA,EAAD,CAAYH,UAAU,oBAAtB,UACG,cAACI,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACG,cAACC,EAAA,EAAD,UACG,cAAC,IAAD,CAAQN,UAAU,aAAaE,KAAM,SAG3C,cAACK,EAAA,EAAD,CAAOC,YAAuB,SAAVrB,EAAmB,cAAgB,iBAAkBsB,MAAOvC,EAAOwC,SAnBpF,SAAAC,GAClBlC,EAASkC,EAAEC,OAAOH,OAClBnC,EAASE,EAASH,eAqBD,SAAVc,GAxMJ,cAAC,IAAD,CACGa,UAAU,oCACVa,QAAS,CAAEC,kBAAkB,GAC7BC,aAAc,SAAAC,GACPA,IACDA,EAAIC,uBAAyBD,EAAIE,sBAEjCF,EAAIE,sBAAwB,WACzB,IAAMC,EAAWH,EAAIC,yBAErB,OAAO,2BAAKE,GAAZ,IAAsBC,OAAQC,KAAKC,MAAMH,EAASC,aAV9D,SAeIjD,EAAMoD,OACJ,cAAC,gBAAD,CACGC,IAAI,KACJ3B,KAAM1B,EACNsD,OAAO,aACPzB,UAAU,4BACV0B,QAAS,SAAAC,GAAQ,OAAIrD,EAASM,EAAa+C,KAL9C,SAOIxD,EAAMyD,KAAI,SAAAC,GACR,OACG,oBAEG5B,QAAS,kBAAMV,EAAgBsC,IAC/B7B,UAAW8B,IAAW,YAAa,CAChCC,UAAWF,EAAKG,cAJtB,SAOG,sBAAKhC,UAAU,iCAAf,UACG,sBAAKA,UAAU,kBAAf,UACG,cAAC,IAAD,CAAcA,UAAU,cACxB,sBAAMA,UAAU,aAAaiC,MAAO,CAAEC,SAAU,OAAQC,MAAO,WAA/D,SAA4E,4BAAIN,EAAK/B,aAExF,sBAAKE,UAAU,2BAA2BiC,MAAO,CAAEG,MAAO,KAA1D,UACG,uBAAOpC,UAAU,8BAA8BiC,MAAO,CAAEG,MAAO,OAA/D,SACG,+BAAQP,EAAKQ,QAAQC,MAAM,EAAG,QAEjC,qBAAKtC,UAAU,uCAAuCiC,MAAO,CAAEG,MAAO,OAAtE,SACG,cAACG,EAAA,EAAD,CAAOvC,UAAU,kBAAkBmC,MAAO,aAAcK,MAAI,EAA5D,SACIX,EAAKY,eAGZ,qBAAKzC,UAAU,uCAAuCiC,MAAO,CAAEG,MAAO,OAAtE,SACG,cAACG,EAAA,EAAD,CAAOvC,UAAU,kBAAkBmC,MAAO,eAAgBK,MAAI,EAA9D,mBACOX,EAAKa,UADZ,YACyBb,EAAKc,mBAtBlCd,EAAKe,UAkCtB,qBAAK5C,UAAU,kBAAf,SACG,oDA4IK,YAAVb,GACE,eAAC0D,EAAA,EAAD,CAAK7C,UAAU,QAAf,UACG,cAAC8C,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAKhD,UAAU,MAA9B,SArET,cAAC,IAAD,CACGA,UAAU,oCACVa,QAAS,CAAEC,kBAAkB,GAC7BC,aAAc,SAAAC,GACPA,IACDA,EAAIC,uBAAyBD,EAAIE,sBAEjCF,EAAIE,sBAAwB,WACzB,IAAMC,EAAWH,EAAIC,yBAErB,OAAO,2BAAKE,GAAZ,IAAsBC,OAAQC,KAAKC,MAAMH,EAASC,aAV9D,SAeIhD,EAASmD,OACP,cAAC0B,EAAA,EAAD,CAAWzB,IAAI,MAAMxB,UAAU,MAA/B,SACI5B,EAASwD,KAAI,SAACC,EAAMqB,GAClB,OACG,cAACC,EAAA,EAAD,CAEGnD,UAAW8B,IAAW,iBAAkB,CACrCsB,OAAQ/D,IAAU,UAAQ6D,EAAI,KAEjCjD,QAAS,kBAAML,EAAW,GAAD,OAAIsD,EAAI,GAAKrB,EAAK/B,MAAO+B,EAAKe,MACvDS,QAAM,EANT,SAQIxB,EAAK/B,OAPD+B,EAAKe,UAatB,qBAAK5C,UAAU,kBAAf,SACG,sDAsCA,cAAC8C,EAAA,EAAD,CAAK9C,UAAU,WAAW+C,GAAG,IAAIC,GAAG,KAApC,SACG,cAAC,IAAD,CACGhD,UAAU,oCACVa,QAAS,CAAEC,kBAAkB,GAC7BC,aAAc,SAAAC,GACPA,IACDA,EAAIC,uBAAyBD,EAAIE,sBAEjCF,EAAIE,sBAAwB,WACzB,IAAMC,EAAWH,EAAIC,yBAErB,OAAO,2BAAKE,GAAZ,IAAsBC,OAAQC,KAAKC,MAAMH,EAASC,aAV9D,SAeG,eAACkC,EAAA,EAAD,CAAYC,UAAWlE,EAAYW,UAAU,MAA7C,UACG,cAACwD,EAAA,EAAD,CAASC,MAAM,MAzJjC,mCACItF,EAAMoD,OACJ,cAAC,gBAAD,CACGC,IAAI,KACJ3B,KAAM1B,EACNsD,OAAO,aACPzB,UAAU,4BACV0B,QAAS,SAAAC,GAAQ,OAAIrD,EAASM,EAAa+C,KAL9C,SAOIxD,EAAMyD,KAAI,SAAAC,GACR,OACG,oBAEG5B,QAAS,kBAAMV,EAAgBsC,IAC/B7B,UAAW8B,IAAW,YAAa,CAChCC,UAAWF,EAAKG,cAJtB,SAOG,sBAAKhC,UAAU,iCAAf,UACG,sBAAKA,UAAU,kBAAf,UACG,cAAC,IAAD,CAAcA,UAAU,cASxB,sBAAMA,UAAU,aAAaiC,MAAO,CAAEC,SAAU,OAAQC,MAAO,WAA/D,SAA4E,4BAAIN,EAAK/B,aAExF,sBAAKE,UAAU,2BAA2BiC,MAAO,CAAEG,MAAO,KAA1D,UACG,uBAAOpC,UAAU,8BAA8BiC,MAAO,CAAEG,MAAO,OAA/D,SACG,+BAAQP,EAAKQ,QAAQC,MAAM,EAAG,QAEjC,qBAAKtC,UAAU,uCAAuCiC,MAAO,CAAEG,MAAO,OAAtE,SACG,cAACG,EAAA,EAAD,CAAOvC,UAAU,kBAAkBmC,MAAO,aAAcK,MAAI,EAA5D,SACIX,EAAKY,eAGZ,qBAAKzC,UAAU,uCAAuCiC,MAAO,CAAEG,MAAO,OAAtE,SACG,cAACG,EAAA,EAAD,CAAOvC,UAAU,kBAAkBmC,MAAO,eAAgBK,MAAI,EAA9D,mBACOX,EAAKa,UADZ,YACyBb,EAAKc,mBA9BlCd,EAAKe,UA2CtB,qBAAK5C,UAAU,kBAAf,SACG,oE,6NCyCH0D,EA1MK,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC1B,EAA0B1E,mBAAS,GAAnC,mBAAO2E,EAAP,KAAcC,EAAd,KACMxF,EAAWyF,cAOjB,EAA4B7E,mBAAS,IAArC,mBAAO8E,EAAP,KAAeC,EAAf,OAC0B/E,mBAAS,IADnC,mBACKgF,EADL,KACaC,EADb,OAEwBjF,mBAAS,IAFjC,mBAEKkF,EAFL,KAEYC,EAFZ,KAGA,EAA8BnF,mBAAS,CAAC,CAAEY,MAAO,GAAIwE,OAAQ,GAAIC,MAAO,MAAxE,mBAAOC,EAAP,KAAgBC,EAAhB,KASMC,EAAY,SAACxB,EAAGyB,EAAKC,GACvB,IAAMC,EAAcL,EACpBK,EAAY3B,GAAGyB,GAAOC,EACtBH,EAAW,YAAII,KAQbC,EAAiB,uCAAG,8BAAAnF,EAAA,sDACbuD,EAAI,EADS,YACNA,EAAIsB,EAAQjD,QADN,oBAEO,KAArBiD,EAAQtB,GAAGpD,MAFG,uBAGdiF,IAAMC,KAAN,8BAAkC9B,EAAI,IAHxB,kBAIP,GAJO,UAKe,KAAtBsB,EAAQtB,GAAGoB,OALJ,wBAMdS,IAAMC,KAAN,oCAAwC9B,EAAI,EAA5C,MANc,kBAOP,GAPO,WAQc,KAArBsB,EAAQtB,GAAGqB,MARJ,wBASdQ,IAAMC,KAAN,8BAAkC9B,EAAI,IATxB,kBAUP,GAVO,QACcA,IADd,8BAahB0B,EAAO,CACTK,QAAS,CACLnF,MAAOkE,EACPO,MAAOL,EACPgB,KAAMd,EAAM3D,MACZ0E,WAAY,IAAIC,MAEpBjH,MAAOqG,GApBW,UAsBhBlG,EAAS+G,YAAYT,IAtBL,QAuBtBhB,IAvBsB,4CAAH,qDAyBvB,OACI,eAAC0B,EAAA,EAAD,CACIC,OAAQ5B,EACRzD,KAAK,KACLF,UAAU,wBACVwF,eAAe,gBAJnB,UAMI,cAAC,IAAD,CAAaC,OAAQ7B,EAArB,0BACA,cAAC8B,EAAA,EAAD,UACI,cAAC,WAAD,UACI,eAACC,EAAA,EAAD,CAAM3F,UAAU,4BAAhB,UACI,cAAC4F,EAAA,EAAD,CAAU5F,UAAU,uBAApB,SACI,qBAAKA,UAAU,gDAAf,SACI,sBAAKA,UAAU,0CAAf,UACI,eAAC6F,EAAA,EAAD,CAAW7F,UAAU,OAAOiC,MAAO,CAAE6D,KAAM,OAA3C,UACI,cAACC,EAAA,EAAD,CAAO/F,UAAU,aAAagG,IAAI,SAAlC,0BAGChC,EAAS,cAACzD,EAAA,EAAD,CACNR,GAAG,SACHU,MAAOuD,EACPxD,YAAY,QACZR,UAAU,sBACVU,SAAU,SAAAC,GAAC,OAAIsD,EAAUtD,EAAEC,OAAOH,QAClCwF,OAAK,IACJ,cAAC1F,EAAA,EAAD,CACDR,GAAG,SACHU,MAAOuD,EACPxD,YAAY,QACZR,UAAU,sBACVU,SAAU,SAAAC,GAAC,OAAIsD,EAAUtD,EAAEC,OAAOH,aAI1C,eAACoF,EAAA,EAAD,CAAW5D,MAAO,CAAE6D,KAAM,SAA1B,UACI,cAACC,EAAA,EAAD,CAAO/F,UAAU,aAAagG,IAAI,SAAlC,mBAGC9B,EAAS,cAAC3D,EAAA,EAAD,CACNR,GAAG,SACHU,MAAOyD,EACP1D,YAAY,QACZR,UAAU,sBACVU,SAAU,SAAAC,GAAC,OAAIwD,EAAUxD,EAAEC,OAAOH,QAClCwF,OAAK,IACJ,cAAC1F,EAAA,EAAD,CACDR,GAAG,SACHU,MAAOyD,EACP1D,YAAY,QACZR,UAAU,sBACVU,SAAU,SAAAC,GAAC,OAAIwD,EAAUxD,EAAEC,OAAOH,aAI1C,eAACoF,EAAA,EAAD,CAAW5D,MAAO,CAAE6D,KAAM,MAAOI,WAAY,IAA7C,UACI,cAACH,EAAA,EAAD,CAAO/F,UAAU,aAAagG,IAAI,QAAlC,0BAGA,cAAC,IAAD,CACIjG,GAAG,QACHC,UAAU,eACVmG,gBAAgB,SAChBC,aAAa,EACbvF,QArHrB,CACf,CAAEJ,MAAO,SAAU4F,MAAO,UAC1B,CAAE5F,MAAO,SAAU4F,MAAO,UAC1B,CAAE5F,MAAO,OAAQ4F,MAAO,QACxB,CAAE5F,MAAO,WAAY4F,MAAO,aAkHQC,MAAOC,IACP9F,MAAO2D,EACP1D,SAAU,SAAAkE,GAAUP,EAASO,gBAOjD,eAACgB,EAAA,EAAD,CAAU5F,UAAU,0CAApB,UACI,cAAC,IAAD,CAAU6D,MAAOA,EAAjB,SACK,SAAAX,GACG,IAAMsD,EAAY,IAANtD,EAAU,MAAQuD,YAC9B,OACI,eAACD,EAAD,CAAaxG,UAAU,mBAAvB,UACI,qBAAKA,UAAU,oCAAf,SACI,qBAAKA,UAAU,eAAf,wBAAuCkD,EAAI,OAE/C,cAACL,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAK9C,UAAU,uDAAuDgD,GAAG,KAAzE,UACI,eAACH,EAAA,EAAD,CAAK7C,UAAU,0BAAf,UACI,eAAC8C,EAAA,EAAD,CAAK9C,UAAU,4BAA4B0G,GAAG,IAAI1D,GAAG,KAArD,UACI,cAAC2D,EAAA,EAAD,CAAU3G,UAAU,0BAApB,mBACA,cAACO,EAAA,EAAD,CAEIP,UAAU,sBACVQ,YAAY,cACZC,MAAO+D,EAAQtB,GAAGpD,MAClBY,SAAU,SAACC,GAAD,OAAO+D,EAAUxB,EAAG,QAASvC,EAAEiG,cAAcnG,aAG/D,eAACqC,EAAA,EAAD,CAAK9C,UAAU,eAAe0G,GAAG,IAAI1D,GAAG,KAAxC,UACI,cAAC2D,EAAA,EAAD,CAAU3G,UAAU,0BAApB,yBACA,cAACO,EAAA,EAAD,CACI2E,KAAK,SACLzE,MAAO+D,EAAQtB,GAAGoB,OAClB9D,YAAY,wBACZE,SAAU,SAACC,GAAD,OAAO+D,EAAUxB,EAAG,SAAUvC,EAAEiG,cAAcnG,aAGhE,eAACqC,EAAA,EAAD,CAAK9C,UAAU,eAAe0G,GAAG,IAAI1D,GAAG,KAAxC,UACI,cAAC2D,EAAA,EAAD,CAAU3G,UAAU,0BAApB,mBACA,cAACO,EAAA,EAAD,CACI2E,KAAK,SACLzE,MAAO+D,EAAQtB,GAAGqB,MAClB/D,YAAY,eACZE,SAAU,SAACC,GAAD,OAAO+D,EAAUxB,EAAG,QAASvC,EAAEiG,cAAcnG,gBAInE,qBAAKT,UAAU,kGAAf,SACI,cAAC,IAAD,CAAGE,KAAM,GAAIF,UAAU,iBAAiBC,QAAS,kBA9JlF,SAACiD,GAChB,IAAM2B,EAAcL,EACpBK,EAAYgC,OAAO3D,EAAG,GACtBuB,EAAWI,GACXf,EAASD,EAAQ,GA0JsFiD,CAAW5D,eArCxEA,MA8CtB,cAACL,EAAA,EAAD,CAAK7C,UAAU,OAAf,SACI,cAAC8C,EAAA,EAAD,CAAKE,GAAG,KAAKhD,UAAU,OAAvB,SACI,eAAC+G,EAAA,EAAOC,OAAR,CAAe7E,MAAM,UAAUjC,KAAK,KAAKF,UAAU,cAAcC,QA7JjF,WACZ,IAAM4E,EAAcL,EACpBK,EAAYoC,KAAK,CAAEnH,MAAO,GAAIwE,OAAQ,GAAIC,MAAO,KACjDE,EAAWI,GACXf,EAASD,EAAQ,IAyJW,UACI,cAAC,IAAD,CAAM3D,KAAM,GAAIF,UAAU,UAC1B,sBAAMA,UAAU,eAAhB,uCAQ5B,cAACkH,EAAA,EAAD,UACI,cAACH,EAAA,EAAD,CAAQ5E,MAAM,UAAUgF,WAAYnD,EAAOzC,QAAU6C,GAAQnE,QAAS6E,EAAtE,wB,0CCzHDsC,GA5FK,SAAAnJ,GAElB,IAAQY,EAAyIZ,EAAzIY,kBAAmBwI,EAAsHpJ,EAAtHoJ,eAAgBC,EAAsGrJ,EAAtGqJ,YAAahJ,EAAyFL,EAAzFK,SAAUF,EAA+EH,EAA/EG,SAAUmJ,EAAqEtJ,EAArEsJ,OAAQxI,EAA6Dd,EAA7Dc,WAAYyI,EAAiDvJ,EAAjDuJ,UAAWC,EAAsCxJ,EAAtCwJ,IAAKC,EAAiCzJ,EAAjCyJ,cAAeC,EAAkB1J,EAAlB0J,cAC/H,EAA8BzI,oBAAS,GAAvC,mBAAO0I,EAAP,KAAgBC,EAAhB,KACA,EAA0B3I,mBAAS,QAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACM0I,EAASC,KAAiBC,MAEhCtI,qBAAU,WACRpB,EAASqJ,EAAc,CAAExI,aACxB,CAACA,IA+CJ,OACE,sBACEa,UAAW8B,IAAW,eAAgB,CACpCmG,MAAsB,IAAhBX,IAFV,UAKE,qBAAKtH,UAAU,UAAf,SACE,qBAAKA,UAAU,+BAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,eAACkI,EAAA,EAAD,CAAalI,UAAU,iBAAvB,UACE,cAAC+G,EAAA,EAAD,CAAQ5E,MAAM,UAAUnC,UAAqB,SAAVb,EAAmB,SAAW,GAAIc,QA1BrE,WACZb,EAAS,QACTL,EAAW,KAwBC,kBACA,cAACgI,EAAA,EAAD,CAAQ5E,MAAM,UAAUnC,UAAqB,YAAVb,EAAsB,SAAW,GAAIc,QAvBxE,WACZb,EAAS,WACLmI,IACEnJ,EAAS,GACXW,EAAWX,EAAS,GAAG0B,OAEvBf,EAAW,oBAEbyI,GAAU,KAeA,wBAEF,uBACW,SAAVrI,GAAoB,cAAC4H,EAAA,EAAOC,OAAR,CAAe7E,MAAM,UAAUlC,QA3DzC,WACrBpB,IACAwI,KAyDuFc,OAAK,EAA7D,sBAGV,YAAVhJ,GAAuB,qCAAE,cAAC4H,EAAA,EAAOC,OAAR,CAAe7E,MAAM,UAAUlC,QA1D3C,WACxB4H,GAAYD,IAyDmFO,OAAK,EAAhE,0BAGxB,cAACpB,EAAA,EAAOC,OAAR,CAAe7E,MAAM,SAASlC,QA1DhB,WAC1B,GAAIwH,EACF,OAAOK,EAAOM,KAAK,CACjBtI,MAAO,gBACPuI,KAAM,2BACNC,KAAM,OACNC,kBAAkB,EAClBC,kBAAmB,iBACnBC,YAAa,CACXC,cAAe,eACfC,aAAc,+BAEhBC,gBAAgB,IACfC,KAXI,uCAWC,WAAOC,GAAP,SAAAnJ,EAAA,sDACFmJ,EAAOrI,OACTnC,EAASoJ,EAAcD,IAFnB,2CAXD,uDAiBP1C,IAAMgE,MAAM,oBAuC0DZ,OAAK,EAAjE,wCASRP,GAAW,cAAC,EAAD,CAAajE,MAAOiE,EAAShE,SAAU,kBAAMiE,GAAYD,U,0CCzEtEoB,I,OAAc,SAAA/K,GAElB,IACEgL,EAKEhL,EALFgL,SACAhK,EAIEhB,EAJFgB,MACAJ,EAGEZ,EAHFY,kBACAqK,EAEEjL,EAFFiL,WACA5K,EACEL,EADFK,SAEIwJ,EAASC,KAAiBC,MAyBhC,OACE,sBAAKhI,UAAU,sEAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BiJ,IAC7B,sBAAKjJ,UAAU,6CAAf,UACGf,IAAUkK,YAAWlK,EAAMmK,cAC1B,cAAC,KAAD,CAAOpJ,UAAU,uBAAuBE,KAAM,GAAID,QAAS,kBAxB1D6H,EAAOM,KAAK,CACjBtI,MAAO,gBACPuI,KAAM,2BACNC,KAAM,OACNC,kBAAkB,EAClBC,kBAAmB,iBACnBC,YAAa,CACXC,cAAe,eACfC,aAAc,+BAEhBC,gBAAgB,IACfC,KAXI,uCAWC,WAAOC,GAAP,SAAAnJ,EAAA,sDACFmJ,EAAOrI,QACTnC,EAAS4K,EAAWjK,EAAMmK,aAAaxG,MACvC/D,KAHI,2CAXD,0DAyBC,KACJ,sBAAMmB,UAAU,4CAEhB,cAAC,IAAD,CAAGA,UAAU,2BAA2BE,KAAM,GAAID,QAASpB,YA+OpDwK,GAzOK,SAAApL,GAElB,IAAQqL,EAA0FrL,EAA1FqL,KAAMzK,EAAoFZ,EAApFY,kBAAmBI,EAAiEhB,EAAjEgB,MAAOX,EAA0DL,EAA1DK,SAAUK,EAAgDV,EAAhDU,WAAYD,EAAoCT,EAApCS,WAAY6K,EAAwBtL,EAAxBsL,QAASL,EAAejL,EAAfiL,WAGnF,EAA0BhK,mBAAS,IAAnC,mBAAOY,EAAP,KAAc0J,EAAd,OAC8BtK,mBAAS,IADvC,mBACGuK,EADH,KACcC,EADd,OAEwBxK,mBAAS,IAFjC,mBAEGyD,EAFH,KAEWgH,EAFX,OAGgCzK,mBAAS,IAHzC,mBAGGuD,EAHH,KAGemH,EAHf,OAI0B1K,mBAAS,IAAIkG,MAJvC,mBAIG/C,EAJH,KAIYwH,EAJZ,OAMqB3K,mBAAS,IAN9B,mBAMG4K,EANH,KAMUC,EANV,KAOMC,EAAa,CACjB,CAAEvJ,MAAO,IAAK4F,MAAO,OACrB,CAAE5F,MAAO,IAAK4F,MAAO,OACrB,CAAE5F,MAAO,IAAK4F,MAAO,SAyCjB4D,EAAoB,WACxB,IAAQb,EAAiBnK,EAAjBmK,aACRI,EAASJ,EAAatJ,OACtB6J,EAAUP,EAAazG,QACvB,IAAK,IAAIO,EAAI,EAAGA,EAAI8G,EAAWzI,OAAQ2B,IACjC8G,EAAW9G,GAAGzC,QAAU2I,EAAa1G,WACvCqH,EAAQC,EAAW9G,IAGvBwG,EAAaN,EAAaK,WAC1BI,EAAWT,EAAa/G,SACxBuH,EAAcR,EAAa3G,aAwD7B,OACE,cAAC6C,EAAA,EAAD,CACEC,OAAQ+D,EAERtJ,UAAU,aACVkK,iBAAiB,MACjBC,SArGwB,WAC1B,IAAQf,EAAiBnK,EAAjBmK,aACR,IAAKD,YAAWC,GAAe,CAC7BI,EAASJ,EAAatJ,OACtB6J,EAAUP,EAAazG,QACvBkH,EAAWT,EAAa/G,SACxBuH,EAAcR,EAAa3G,YAC3BiH,EAAaN,EAAaK,WAC1B,IAAK,IAAIvG,EAAI,EAAGA,EAAI8G,EAAWzI,OAAQ2B,IACjC8G,EAAW9G,GAAGzC,QAAU2I,EAAa1G,WACvCqH,EAAQC,EAAW9G,MA4FvBkH,SArFwB,WAC1BV,EAAa,IACbE,EAAc,IACdJ,EAAS,IACTG,EAAU,IACVE,EAAW,IAAIzE,MACf2E,EAAQ,IACRzL,EAASI,EAAW,MA+ElB8G,eAAe,oCAPjB,SASE,eAAC6E,GAAA,EAAD,CAAMtK,GAAG,kBAAkBC,UAAU,aAAasK,SAAU,SAAA3J,GAAC,OAAIA,EAAE4J,kBAAnE,UACE,cAAC,GAAD,CACEtL,MAAOA,EACPX,SAAUA,EACV4K,WAAYA,EACZrK,kBAAmBA,EAJrB,SAnHAI,IAAUkK,YAAWlK,EAAMmK,cACtB,cAEA,aAwHL,eAAC1D,EAAA,EAAD,CAAW1F,UAAU,2BAArB,UACE,eAAC6F,EAAA,EAAD,WACE,eAACE,EAAA,EAAD,CAAO/F,UAAU,aAAagG,IAAI,aAAlC,mBACQ,sBAAMhG,UAAU,cAAhB,kBAER,cAACO,EAAA,EAAD,CACER,GAAG,aACHU,MAAOX,EACPU,YAAY,QACZR,UAAU,sBACVU,SAAU,SAAAC,GAAC,OAAI6I,EAAS7I,EAAEC,OAAOH,aAGrC,cAACoF,EAAA,EAAD,UACE,eAAChD,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,IAAR,UACE,eAACgD,EAAA,EAAD,CAAO/F,UAAU,aAAagG,IAAI,cAAlC,mBACQ,sBAAMhG,UAAU,cAAhB,kBAER,cAACO,EAAA,EAAD,CACER,GAAG,cACHmF,KAAK,SACLzE,MAAOkC,EACPnC,YAAY,QACZR,UAAU,sBACVU,SAAU,SAAAC,GAAC,OAAIgJ,EAAUhJ,EAAEC,OAAOH,aAGtC,eAACqC,EAAA,EAAD,CAAKC,GAAG,IAAR,UACE,cAACgD,EAAA,EAAD,CAAO/F,UAAU,aAAagG,IAAI,YAAlC,wBAGA,cAAC,IAAD,CACEjG,GAAG,YACHC,UAAU,eACVmG,gBAAgB,SAChBC,aAAa,EACbvF,QAASmJ,EACT1D,MAAOC,IACP9F,MAAOqJ,EACPpJ,SAAU,SAAAkE,GACRmF,EAAQnF,cAMlB,eAACiB,EAAA,EAAD,WACE,eAACE,EAAA,EAAD,CAAOC,IAAI,cAAchG,UAAU,aAAnC,6BACkB,sBAAMA,UAAU,cAAhB,kBAElB,cAACO,EAAA,EAAD,CACER,GAAG,cACHmF,KAAK,SACLzE,MAAOgC,EACPjC,YAAY,oBACZR,UAAU,sBACVU,SAAU,SAAAC,GAAC,OAAIiJ,EAAcjJ,EAAEC,OAAOH,aAG1C,eAACoF,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAO/F,UAAU,aAAagG,IAAI,WAAlC,0BAGA,cAAC,KAAD,CACEjG,GAAG,WACHyK,KAAK,WACLxK,UAAU,eACVU,SAAU,SAAA+J,GAAI,OAAIZ,EAAWY,EAAK,KAClChK,MAAO4B,EACPxB,QAAS,CAAE6J,WAAY,cAG3B,eAAC7E,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAO/F,UAAU,aAAagG,IAAI,YAAlC,0BAGA,cAACzF,EAAA,EAAD,CACER,GAAG,YACHU,MAAOgJ,EACPtC,UAAQ,OAIZ,cAACtB,EAAA,EAAD,CAAW7F,UAAU,OAArB,SA1JoB,WAC1B,IAAM2K,EAAQ,CACZ/H,IAAK3D,EAAMmK,aAAaxG,IACxB9C,QACA6C,SACAF,aACAJ,UACAoH,UAAWA,GAAaA,EAAUhJ,MAClCiC,UAAWoH,GAASA,EAAMrJ,OAG5B,OAAIxB,IAAUkK,YAAWlK,EAAMmK,cAE3B,eAAC,WAAD,WACE,cAACrC,EAAA,EAAD,CACE5E,MAAM,UACNgF,WAAYrH,EAAMyB,QAAUoB,EAAOpB,QACnCvB,UAAU,mCACVC,QAAS,WACP3B,EAASK,EAAW,2BAAKgM,GAAN,IAAa5K,GAAId,EAAMmK,aAAarJ,OACvDlB,KANJ,oBAWA,cAACkI,EAAA,EAAD,CAAQ5E,MAAM,YAAYlC,QAASgK,EAAmBW,SAAO,EAA7D,sBAOF,eAAC,WAAD,WACE,cAAC7D,EAAA,EAAD,CACE5E,MAAM,UACNgF,WAAYrH,EAAMyB,QAAUoB,EAAOpB,QAAUkB,EAAWlB,QACxDvB,UAAU,qBACVC,QAAS,WACP3B,EAASiL,EAAQoB,IACjB9L,KANJ,iBAWA,cAACkI,EAAA,EAAD,CAAQ5E,MAAM,YAAYlC,QAASpB,EAAmB+L,SAAO,EAA7D,uBA8G6BC,c,QC7KxBC,UA1GF,WAAO,IAAD,EAEf,EAAwB5L,mBAAS,IAAjC,mBAAO6L,EAAP,KAAUhM,EAAV,KACA,EAA4BG,oBAAS,GAArC,mBAAOqI,EAAP,KAAeC,EAAf,KACA,EAA4BtI,mBAAS,IAArC,mBAAOuI,EAAP,KAAYzI,EAAZ,KACA,EAA0BE,mBAAS,IAAnC,mBAAOhB,EAAP,KAAcO,EAAd,KACA,EAAsCS,oBAAS,GAA/C,mBAAOoI,EAAP,KAAoBD,EAApB,KACA,EAA8CnI,oBAAS,GAAvD,mBAAO8L,EAAP,KAAwBC,EAAxB,KAGM3M,EAAWyF,cACX9E,EAAQiM,aAAY,SAAAP,GAAK,OAAIA,EAAMQ,QAEnCC,EAAYC,cACZhN,EAAS,CACXiN,EAAGpN,GAAS,GACZ6M,EAAGA,GAAK,IAINjM,EAAoB,kBAAMuI,GAAgBC,IAC1CzI,EAAoB,kBAAMoM,GAAoBD,IAcpD,OAXAtL,qBAAU,WAONpB,EAASE,YAASH,IAClBC,EAASiN,iBACV,CAACtM,EAAMd,MAAMoD,OAAQrD,EAAO6M,IAG3B,eAAC,WAAD,WACI,cAACS,IAAD,GACIvM,MAAOA,EACPZ,OAAQA,EACRkJ,OAAQA,EACRE,IAAKA,EACLC,cAAeA,IACfF,UAAWA,EACXzI,WAAYA,EACZX,SAAUa,EAAMb,SAChBI,SAAUA,KATd,2BAUgBO,GAVhB,8BAWmB4I,KAXnB,yBAYcrJ,GAZd,4BAaiBgJ,GAbjB,0BAce8D,EAAUK,QAdzB,+BAeoBpE,GAfpB,kCAgBuBxI,GAhBvB,IAmBA,qBAAKmB,UAAU,gBAAf,SACI,qBAAKA,UAAU,kBAAf,SACI,sBAAKA,UAAU,eAAf,UACI,qBACIA,UAAW8B,IAAW,uBAAwB,CAC1CmG,MAAsB,IAAhBX,IAEVrH,QAASnB,IAGZG,EACG,cAAC,EAAD,CACIA,MAAOA,EACPd,MAAOc,EAAMd,MACbC,SAAUa,EAAMb,SAChB2M,EAAGxD,EACHvI,aAAcA,EACdD,WAAYA,EACZb,MAAOA,EACPG,OAAQA,EACRI,SAAUA,EACVH,SAAUA,EACVE,SAAUA,IACV4M,UAAWA,EACXzM,WAAYA,IACZD,WAAYA,IACZE,aAAcA,IACdE,kBAAmBA,EACnBD,kBAAmBA,IAEvB,KAEJ,cAAC,GAAD,CACII,MAAOA,EACPZ,OAAQA,EACRkL,QAASA,IACTjL,SAAUA,EACVgL,KAAM0B,EACNrM,WAAYA,IACZD,WAAYA,IACZwK,WAAYA,IACZrK,kBAAmBA,gB,iJClHzC6M,EAAW,SAAAzN,GAWf,IATA,IAAQ4F,EAA6C5F,EAA7C4F,MAAOrC,EAAsCvD,EAAtCuD,IAAgByH,GAAsBhL,EAAjC0N,UAAiC1N,EAAtBgL,UAAa2C,EAA5C,YAAqD3N,EAArD,GAGMuI,EAAMhF,EAGNqK,EAAQ,GAGL3I,EAAI,EAAGA,EAAIW,EAAOX,IACzB2I,EAAM5E,KAAKgC,EAAS/F,IAGtB,OAAO,cAACsD,EAAD,2BAASoF,GAAT,aAAgBC,MAUzBH,EAASI,aAAe,CACtBtK,IAAK,OAGQkK,O,iCChCf,2aAEMK,EAAU,6BAKVC,EAAe,SAAC,GAAD,IAAGlM,EAAH,EAAGA,MAAOuI,EAAV,EAAUA,KAAV,OACjB,eAAC,WAAD,WACI,qBAAKrI,UAAU,kBAAf,SACI,qBAAKA,UAAU,gBAAf,SACI,qBAAIA,UAAU,+BAAd,sBAAuDF,SAG/D,qBAAKE,UAAU,gBAAf,SACI,+BAAOqI,GAAc,6DAOpB7J,EAAW,SAAAH,GACpB,OAAO,SAAAC,GACH,OAAO2N,IAAMC,KAAN,UAAcH,EAAd,kBAAuC1N,GAAQwK,MAAK,SAAAsD,GACvD7N,EAAS,CACL4G,KAAM,YACN/G,MAAOgO,EAAIvH,KAAKA,KAChBvG,gBAKH+N,EAAY,SAAA/N,GACrB,OAAO,SAAAC,GACH,OAAO2N,IAAMC,KAAN,UAAcH,EAAd,kBAAuC1N,GAAQwK,MAAK,SAAAsD,GACvD7N,EAAS+N,YAAYF,EAAIvH,KAAKA,KAAMvG,EAAQ8N,EAAIvH,KAAK0H,gBAKpD3E,EAAgB,SAACxI,GAC1B,OAAO,SAAAb,GACHA,EAAS,CACL4G,KAAM,YACN/F,YAMCP,EAAe,SAAAT,GAAK,OAAI,SAAAG,GAAQ,OAAIA,EAAS,CAAE4G,KAAM,gBAAiB/G,YAGtEoL,EAAU,SAAAgD,GACnB,OAAO,SAACjO,EAAUkO,GACdP,IACKC,KADL,UACaH,EADb,iBACqC,CAAEQ,SAClC1D,MAAK,SAAAsD,GACF7N,EAAS,CACL4G,KAAM,WACNqH,KAAMJ,EAAIvH,OAEdG,IAAM0H,QACF,cAACT,EAAD,CAAclM,MAAOqM,EAAIvH,KAAK9E,QAC9B,CAAE4M,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW,SAG9DhE,KAAKvK,EAASE,EAASgO,IAAWrB,KAAK9M,YAKvCM,EAAa,SAAA4N,GACtB,OAAO,SAACjO,EAAUkO,GACdP,IACKC,KADL,UACaH,EADb,oBACwC,CAAEQ,SACrC1D,MAAK,SAAAsD,GACF7N,EAAS,CACL4G,KAAM,cACNqH,KAAMJ,EAAIvH,OAEdG,IAAM0H,QACF,cAACT,EAAD,CAAclM,MAAOqM,EAAIvH,KAAK9E,MAAOuI,KAAM,yDAC3C,CAAEqE,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW,SAG9DhE,KAAKvK,EAASE,EAASgO,IAAWrB,KAAK9M,YAKvC6K,EAAa,SAAA4D,GACtB,OAAO,SAACxO,EAAUkO,GACdP,IACKC,KADL,UACaH,EADb,oBACwC,CAAEe,WACrCjE,MAAK,SAAAsD,GACF7N,EAAS,CACL4G,KAAM,cACNqH,KAAMJ,EAAIvH,OAEdG,IAAM0H,QACF,cAACT,EAAD,CAAclM,MAAOqM,EAAIvH,KAAK9E,MAAOuI,KAAM,yDAC3C,CAAEqE,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW,SAG9DhE,MAAK,kBAAMvK,EAASE,EAASgO,IAAWrB,KAAK9M,cAK7CK,EAAa,SAAA6N,GAAI,OAAI,SAAAjO,GAAQ,OAAIA,EAAS,CAAE4G,KAAM,cAAeqH,WAGjEhB,EAAc,WACvB,OAAO,SAAAjN,GACH,OAAO2N,IAAMc,IAAN,UAAahB,EAAb,sBAAyClD,MAAK,SAAAsD,GACjD7N,EAAS,CACL4G,KAAM,eACN9G,SAAU+N,EAAIvH,KAAKxG,gBAKtBiH,EAAc,SAAAb,GACvB,OAAO,SAAClG,EAAUkO,GACdP,IAAMC,KAAN,UAAcH,EAAd,qBAA0C,CAAEvH,YAAWqE,MAAK,SAAAsD,GACxD7N,EAASiN,EAAYiB,IAAWrB,KAAK9M,SAErC0G,IAAM0H,QACF,cAACT,EAAD,CAAclM,MAAOqM,EAAIvH,KAAK9E,MAAOuI,KAAM,yDAC3C,CAAEqE,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW,WAM1DnF,EAAgB,SAAC3H,GAC1B,OAAO,SAACzB,EAAUkO,GACd,OAAOP,IAAMC,KAAN,UAAcH,EAAd,wBAA6C,CAAEhM,OAAM8I,MAAK,SAAAsD,GAC7D7N,EAASiN,EAAYiB,IAAWrB,KAAK9M,SACrC0G,IAAM0H,QACF,cAACT,EAAD,CAAclM,MAAOqM,EAAIvH,KAAK9E,MAAOuI,KAAM,4DAC3C,CAAEqE,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW","file":"static/js/19.a9c0219c.chunk.js","sourcesContent":["import classnames from 'classnames'\nimport { ReactSortable } from 'react-sortablejs'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Menu, Search, MoreVertical } from 'react-feather'\nimport {\n   Input,\n   Row,\n   Col,\n   ListGroup,\n   ListGroupItem,\n   TabContent,\n   TabPane,\n   CardText,\n   InputGroup,\n   CustomInput,\n   InputGroupText,\n   InputGroupAddon,\n   Badge\n} from 'reactstrap'\nimport { useEffect, useState } from 'react'\n\nconst Tasks = props => {\n   // ** Props\n   const {\n      query,\n      tasks,\n      packages,\n      params,\n      setSort,\n      dispatch,\n      getTasks,\n      setQuery,\n      updateTask,\n      selectTask,\n      reOrderTasks,\n      handleTaskSidebar,\n      handleMainSidebar,\n      setPackage,\n      setPackageId,\n      store\n   } = props\n   const [stage, setStage] = useState('')\n   const [activeList, setActiveLIst] = useState('1')\n\n   // ** Function to selectTask on click\n   const handleTaskClick = obj => {\n      dispatch(selectTask(obj))\n      handleTaskSidebar()\n   }\n   const storeStage = store.stage\n   const iAA = true\n   useEffect(async () => {\n      await setStage(storeStage.stage)\n   }, [storeStage])\n   const toggleList = async (list, title, id) => {\n      if (activeList !== list) {\n         setActiveLIst(list)\n      }\n      setPackageId(id)\n      await setPackage(title)\n      await dispatch(getTasks(params))\n   }\n\n   const renderTasks = () => {\n      return (\n         <PerfectScrollbar\n            className='list-group todo-task-list-wrapper'\n            options={{ wheelPropagation: false }}\n            containerRef={ref => {\n               if (ref) {\n                  ref._getBoundingClientRect = ref.getBoundingClientRect\n\n                  ref.getBoundingClientRect = () => {\n                     const original = ref._getBoundingClientRect()\n\n                     return { ...original, height: Math.floor(original.height) }\n                  }\n               }\n            }}\n         >\n            {tasks.length ? (\n               <ReactSortable\n                  tag='ul'\n                  list={tasks}\n                  handle='.drag-icon'\n                  className='todo-task-list media-list'\n                  setList={newState => dispatch(reOrderTasks(newState))}\n               >\n                  {tasks.map(item => {\n                     return (\n                        <li\n                           key={item._id}\n                           onClick={() => handleTaskClick(item)}\n                           className={classnames('todo-item', {\n                              completed: item.isCompleted\n                           })}\n                        >\n                           <div className='todo-title-wrapper dis-grid3-1'>\n                              <div className='todo-title-area'>\n                                 <MoreVertical className='drag-icon' />\n                                 <span className='todo-title' style={{ fontSize: '15px', color: '#5e50ee' }}><b>{item.title}</b></span>\n                              </div>\n                              <div className='todo-item-action mt-lg-0' style={{ width: 180 }}>\n                                 <small className='text-nowrap text-muted mr-1' style={{ width: '40%' }}>\n                                    <span >{item.dueDate.slice(0, 10)}</span>\n                                 </small>\n                                 <div className='badge-wrapper justify-content-center' style={{ width: '30%' }}>\n                                    <Badge className='text-capitalize' color={'light-info'} pill>\n                                       {item.userNumber}\n                                    </Badge>\n                                 </div>\n                                 <div className='badge-wrapper justify-content-center' style={{ width: '30%' }}>\n                                    <Badge className='text-capitalize' color={'light-danger'} pill>\n                                       {`${item.tokenType} ${item.budget}`}\n                                    </Badge>\n                                 </div>\n                              </div>\n\n                           </div>\n                           {/* <p className='todo-title' style={{ fontSize: '12px', paddingLeft: '30px' }}>{item.description}</p> */}\n                        </li>\n                     )\n                  })}\n               </ReactSortable>\n            ) : (\n               <div className='no-results show'>\n                  <h5>No Items Found</h5>\n               </div>\n            )}\n\n         </PerfectScrollbar>\n      )\n   }\n   const renderTasksInPackage = () => {\n      return (\n         <>\n            {tasks.length ? (\n               <ReactSortable\n                  tag='ul'\n                  list={tasks}\n                  handle='.drag-icon'\n                  className='todo-task-list media-list'\n                  setList={newState => dispatch(reOrderTasks(newState))}\n               >\n                  {tasks.map(item => {\n                     return (\n                        <li\n                           key={item._id}\n                           onClick={() => handleTaskClick(item)}\n                           className={classnames('todo-item', {\n                              completed: item.isCompleted\n                           })}\n                        >\n                           <div className='todo-title-wrapper dis-grid3-1'>\n                              <div className='todo-title-area'>\n                                 <MoreVertical className='drag-icon' />\n                                 {/* <CustomInput\n                                    type='checkbox'\n                                    className='custom-control-Primary'\n                                    id={item.title}\n                                    label=''\n                                    onChange={e => dispatch(updateTask({ ...item, isCompleted: e.target.checked }))}\n                                    checked={item.isCompleted}\n                                 /> */}\n                                 <span className='todo-title' style={{ fontSize: '15px', color: '#5e50ee' }}><b>{item.title}</b></span>\n                              </div>\n                              <div className='todo-item-action mt-lg-0' style={{ width: 180 }}>\n                                 <small className='text-nowrap text-muted mr-1' style={{ width: '40%' }}>\n                                    <span >{item.dueDate.slice(0, 10)}</span>\n                                 </small>\n                                 <div className='badge-wrapper justify-content-center' style={{ width: '30%' }}>\n                                    <Badge className='text-capitalize' color={'light-info'} pill>\n                                       {item.userNumber}\n                                    </Badge>\n                                 </div>\n                                 <div className='badge-wrapper justify-content-center' style={{ width: '30%' }}>\n                                    <Badge className='text-capitalize' color={'light-danger'} pill>\n                                       {`${item.tokenType} ${item.budget}`}\n                                       {/* $ {item.budget} */}\n                                    </Badge>\n                                 </div>\n                              </div>\n\n                           </div>\n                           {/* <p className='todo-title' style={{ fontSize: '12px', paddingLeft: '30px' }}>{item.description}</p> */}\n                        </li>\n                     )\n                  })}\n               </ReactSortable>\n            ) : (\n               <div className='no-results show'>\n                  <h5>No Items Found</h5>\n               </div>\n            )}\n         </>\n      )\n   }\n   const renderPackages = () => {\n      return (\n         <PerfectScrollbar\n            className='list-group todo-task-list-wrapper'\n            options={{ wheelPropagation: false }}\n            containerRef={ref => {\n               if (ref) {\n                  ref._getBoundingClientRect = ref.getBoundingClientRect\n\n                  ref.getBoundingClientRect = () => {\n                     const original = ref._getBoundingClientRect()\n\n                     return { ...original, height: Math.floor(original.height) }\n                  }\n               }\n            }}\n         >\n            {packages.length ? (\n               <ListGroup tag='div' className='p-1'>\n                  {packages.map((item, i) => {\n                     return (\n                        <ListGroupItem\n                           key={item._id}\n                           className={classnames('cursor-pointer', {\n                              active: activeList === `${i + 1}`\n                           })}\n                           onClick={() => toggleList(`${i + 1}`, item.title, item._id)}\n                           action\n                        >\n                           {item.title}\n                        </ListGroupItem>\n                     )\n                  })}\n               </ListGroup>\n            ) : (\n               <div className='no-results show'>\n                  <h5>No Items Found</h5>\n               </div >\n            )}\n\n         </PerfectScrollbar >\n      )\n   }\n\n   // ** Function to getTasks based on search query\n   const handleFilter = e => {\n      setQuery(e.target.value)\n      dispatch(getTasks(params))\n   }\n\n   return (\n      <>\n         <div className='todo-app-list'>\n            <div className='app-fixed-search d-flex align-items-center'>\n               <div className='sidebar-toggle cursor-pointer d-block d-lg-none ml-1' onClick={handleMainSidebar}>\n                  <Menu size={21} />\n               </div>\n               <div className='d-flex align-content-center justify-content-between w-100'>\n                  <InputGroup className='input-group-merge'>\n                     <InputGroupAddon addonType='prepend'>\n                        <InputGroupText>\n                           <Search className='text-muted' size={14} />\n                        </InputGroupText>\n                     </InputGroupAddon>\n                     <Input placeholder={stage === 'task' ? 'Search task' : 'Search package'} value={query} onChange={handleFilter} />\n                  </InputGroup>\n               </div>\n            </div>\n            {stage === 'task' && renderTasks()}\n            {stage === 'package' &&\n               <Row className=\"h-100\">\n                  <Col md='4' sm='12' className='p-0'>\n                     {renderPackages()}\n                  </Col>\n                  <Col className='p-0 pr-1' md='8' sm='12'>\n                     <PerfectScrollbar\n                        className='list-group todo-task-list-wrapper'\n                        options={{ wheelPropagation: false }}\n                        containerRef={ref => {\n                           if (ref) {\n                              ref._getBoundingClientRect = ref.getBoundingClientRect\n\n                              ref.getBoundingClientRect = () => {\n                                 const original = ref._getBoundingClientRect()\n\n                                 return { ...original, height: Math.floor(original.height) }\n                              }\n                           }\n                        }}\n                     >\n                        <TabContent activeTab={activeList} className='p-1'>\n                           <TabPane tabId='1'>\n                           </TabPane>\n                           {/* {renderTasks()} */}\n                           {renderTasksInPackage()}\n                        </TabContent>\n                     </PerfectScrollbar>\n                  </Col>\n               </Row>\n            }\n         </div>\n      </>\n   )\n}\n\nexport default Tasks\n","import { useState, Fragment } from 'react'\r\nimport Repeater from '@components/repeater'\r\nimport { toast } from 'react-toastify'\r\n\r\n// ** Third Party Components\r\nimport { SlideDown } from 'react-slidedown'\r\nimport { X, Plus, Hash } from 'react-feather'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors } from '@utils'\r\nimport {\r\n    Modal, ModalHeader, ModalBody, ModalFooter,\r\n    Card,\r\n    CardBody,\r\n    CardText,\r\n    Row,\r\n    Col,\r\n    Input,\r\n    FormGroup,\r\n    Label,\r\n    Button\r\n} from 'reactstrap'\r\n\r\n// ** Styles\r\nimport 'react-slidedown/lib/slidedown.css'\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\r\nimport '@styles/base/pages/app-invoice.scss'\r\nimport { makePackage } from './store/actions'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst MakePackage = ({ modal, onToggle }) => {\r\n    const [count, setCount] = useState(1)\r\n    const dispatch = useDispatch()\r\n    const tagOptions = [\r\n        { value: 'bronze', label: 'Bronze' },\r\n        { value: 'silver', label: 'Silver' },\r\n        { value: 'gold', label: 'Gold' },\r\n        { value: 'platinum', label: 'Platinum' }\r\n    ]\r\n    const [pTitle, setPTitle] = useState(''),\r\n        [pPrice, setPPrice] = useState(\"\"),\r\n        [pType, setPType] = useState(\"\")\r\n    const [dataArr, setDataArr] = useState([{ title: '', number: '', price: '' }])\r\n    // ** Deletes form\r\n    const deleteForm = (i) => {\r\n        const tempDataArr = dataArr\r\n        tempDataArr.splice(i, 1)\r\n        setDataArr(tempDataArr)\r\n        setCount(count - 1)\r\n    }\r\n\r\n    const updateArr = (i, key, data) => {\r\n        const tempDataArr = dataArr\r\n        tempDataArr[i][key] = data\r\n        setDataArr([...tempDataArr])\r\n    }\r\n    const addTask = () => {\r\n        const tempDataArr = dataArr\r\n        tempDataArr.push({ title: '', number: '', price: '' })\r\n        setDataArr(tempDataArr)\r\n        setCount(count + 1)\r\n    }\r\n    const handleMakePackage = async () => {\r\n        for (let i = 0; i < dataArr.length; i++) {\r\n            if (dataArr[i].title === \"\") {\r\n                toast.info(`Input title in TASK ${i + 1}`)\r\n                return 0\r\n            } else if (dataArr[i].number === \"\") {\r\n                toast.info(`Input user number in TASK ${i + 1} `)\r\n                return 0\r\n            } else if (dataArr[i].price === \"\") {\r\n                toast.info(`Input price in TASK ${i + 1}`)\r\n                return 0\r\n            }\r\n        }\r\n        const data = {\r\n            package: {\r\n                title: pTitle,\r\n                price: pPrice,\r\n                type: pType.value,\r\n                issuedDate: new Date()\r\n            },\r\n            tasks: dataArr\r\n        }\r\n        await dispatch(makePackage(data))\r\n        onToggle()\r\n    }\r\n    return (\r\n        <Modal\r\n            isOpen={modal}\r\n            size=\"lg\"\r\n            className='modal-dialog-centered'\r\n            modalClassName='modal-success'\r\n        >\r\n            <ModalHeader toggle={onToggle}>Make Package</ModalHeader>\r\n            <ModalBody>\r\n                <Fragment>\r\n                    <Card className='invoice-preview-card mb-0'>\r\n                        <CardBody className='invoice-padding pb-0'>\r\n                            <div className=' justify-content-between invoice-spacing mt-0'>\r\n                                <div className='invoice-number-date mt-md-0 mt-2 d-flex'>\r\n                                    <FormGroup className=\"pr-1\" style={{ flex: '3 1' }}>\r\n                                        <Label className='form-label' for='pTitle'>\r\n                                            Package Name\r\n                                        </Label>\r\n                                        {pTitle ? <Input\r\n                                            id='pTitle'\r\n                                            value={pTitle}\r\n                                            placeholder='Title'\r\n                                            className='new-todo-item-title'\r\n                                            onChange={e => setPTitle(e.target.value)}\r\n                                            valid\r\n                                        /> : <Input\r\n                                            id='pTitle'\r\n                                            value={pTitle}\r\n                                            placeholder='Title'\r\n                                            className='new-todo-item-title'\r\n                                            onChange={e => setPTitle(e.target.value)}\r\n                                        />}\r\n\r\n                                    </FormGroup>\r\n                                    <FormGroup style={{ flex: '0.7 1' }}>\r\n                                        <Label className='form-label' for='pTitle'>\r\n                                            Price\r\n                                        </Label>\r\n                                        {pPrice ? <Input\r\n                                            id='pPrice'\r\n                                            value={pPrice}\r\n                                            placeholder='Price'\r\n                                            className='new-todo-item-title'\r\n                                            onChange={e => setPPrice(e.target.value)}\r\n                                            valid\r\n                                        /> : <Input\r\n                                            id='pPrice'\r\n                                            value={pPrice}\r\n                                            placeholder='Price'\r\n                                            className='new-todo-item-title'\r\n                                            onChange={e => setPPrice(e.target.value)}\r\n                                        />}\r\n\r\n                                    </FormGroup>\r\n                                    <FormGroup style={{ flex: '1 1', marginLeft: 10 }}>\r\n                                        <Label className='form-label' for='pType'>\r\n                                            Package Type\r\n                                        </Label>\r\n                                        <Select\r\n                                            id='pType'\r\n                                            className='react-select'\r\n                                            classNamePrefix='select'\r\n                                            isClearable={true}\r\n                                            options={tagOptions}\r\n                                            theme={selectThemeColors}\r\n                                            value={pType}\r\n                                            onChange={data => { setPType(data) }}\r\n                                        // valid={true}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </CardBody>\r\n                        <CardBody className='invoice-padding invoice-product-details'>\r\n                            <Repeater count={count}>\r\n                                {i => {\r\n                                    const Tag = i === 0 ? 'div' : SlideDown\r\n                                    return (\r\n                                        <Tag key={i} className='repeater-wrapper'>\r\n                                            <div className='divider divider-left divider-info'>\r\n                                                <div className='divider-text'>{`Task ${i + 1}`}</div>\r\n                                            </div>\r\n                                            <Row>\r\n                                                <Col className='d-flex product-details-border position-relative pr-0' sm='12'>\r\n                                                    <Row className='w-100 pr-lg-0 pr-1 py-2'>\r\n                                                        <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2' lg='7' sm='12'>\r\n                                                            <CardText className='col-title mb-md-50 mb-0'>Title</CardText>\r\n                                                            <Input\r\n                                                                // id={`title${i}`}\r\n                                                                className='new-todo-item-title'\r\n                                                                placeholder='Input title'\r\n                                                                value={dataArr[i].title}\r\n                                                                onChange={(e) => updateArr(i, 'title', e.currentTarget.value)}\r\n                                                            />\r\n                                                        </Col>\r\n                                                        <Col className='my-lg-0 my-2' lg='3' sm='12'>\r\n                                                            <CardText className='col-title mb-md-50 mb-0'>User Number</CardText>\r\n                                                            <Input\r\n                                                                type='number'\r\n                                                                value={dataArr[i].number}\r\n                                                                placeholder='Input Number of Users'\r\n                                                                onChange={(e) => updateArr(i, 'number', e.currentTarget.value)}\r\n                                                            />\r\n                                                        </Col>\r\n                                                        <Col className='my-lg-0 mt-2' lg='2' sm='12'>\r\n                                                            <CardText className='col-title mb-md-50 mb-0'>Price</CardText>\r\n                                                            <Input\r\n                                                                type='number'\r\n                                                                value={dataArr[i].price}\r\n                                                                placeholder='Input Budget'\r\n                                                                onChange={(e) => updateArr(i, 'price', e.currentTarget.value)}\r\n                                                            />\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                    <div className='d-flex flex-column align-items-center justify-content-start invoice-product-actions py-50 px-25'>\r\n                                                        <X size={18} className='cursor-pointer' onClick={() => deleteForm(i)} />\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Tag>\r\n                                    )\r\n                                }}\r\n                            </Repeater>\r\n                            {/* </PerfectScrollbar> */}\r\n                            <Row className='mt-1'>\r\n                                <Col sm='12' className='px-0'>\r\n                                    <Button.Ripple color='primary' size='sm' className='btn-add-new' onClick={addTask}>\r\n                                        <Plus size={14} className='mr-25'></Plus>\r\n                                        <span className='align-middle'>Add Task</span>\r\n                                    </Button.Ripple>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Fragment>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color='primary' disabled={!(pTitle.length && pType)} onClick={handleMakePackage}>\r\n                    Make\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default MakePackage","// ** Third Party Components\nimport classnames from 'classnames'\n// import PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Button, ListGroup, ListGroupItem, Row, Col, ButtonGroup } from 'reactstrap'\nimport MakePackage from './MakePackage'\nimport { useEffect, useState } from 'react'\n\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport { toast } from 'react-toastify'\n\nconst TodoSidebar = props => {\n  // ** Props\n  const { handleTaskSidebar, setMainSidebar, mainSidebar, dispatch, packages, pState, setPackage, setPState, pId, deletePackage, setStoreStage } = props\n  const [isModal, setIsModal] = useState(false)\n  const [stage, setStage] = useState('task')\n  const MySwal = withReactContent(Swal)\n\n  useEffect(() => {\n    dispatch(setStoreStage({ stage }))\n  }, [stage])\n\n  // ** Functions To Handle Add Task Click\n  const handleAddClick = () => {\n    handleTaskSidebar()\n    setMainSidebar()\n  }\n  const handleMakePackage = () => {\n    setIsModal(!isModal)\n  }\n  const handleDeletePackage = () => {\n    if (pId) {\n      return MySwal.fire({\n        title: 'Are you sure?',\n        text: \"Do you buy this package?\",\n        icon: 'info',\n        showCancelButton: true,\n        confirmButtonText: 'Yes, buy this!',\n        customClass: {\n          confirmButton: 'btn btn-info',\n          cancelButton: 'btn btn-outline-danger ml-1'\n        },\n        buttonsStyling: false\n      }).then(async (result) => {\n        if (result.value) {\n          dispatch(deletePackage(pId))\n        }\n      })\n    } else {\n      toast.error(\"Select package!\")\n    }\n  }\n  const func1 = () => {\n    setStage('task')\n    setPackage('')\n  }\n  const func2 = () => {\n    setStage('package')\n    if (pState) {\n      if (packages[0]) {\n        setPackage(packages[0].title)\n      } else {\n        setPackage('!@#none)(*&&^%$#')\n      }\n      setPState(true)\n    }\n  }\n  return (\n    <div\n      className={classnames('sidebar-left', {\n        show: mainSidebar === true\n      })}\n    >\n      <div className='sidebar'>\n        <div className='sidebar-content todo-sidebar'>\n          <div className='todo-app-menu'>\n            <div className='add-task'>\n              <ButtonGroup className='mb-1 btn-block'>\n                <Button color='primary' className={stage === 'task' ? 'active' : ''} onClick={func1}>Task</Button>\n                <Button color='primary' className={stage === 'package' ? 'active' : ''} onClick={func2}>Package</Button>\n              </ButtonGroup>\n              <hr />\n              {stage === 'task' && <Button.Ripple color='primary' onClick={handleAddClick} block>\n                Add Task\n              </Button.Ripple>}\n              {stage === 'package' && <><Button.Ripple color='primary' onClick={handleMakePackage} block>\n                Make Package\n              </Button.Ripple>\n                <Button.Ripple color='danger' onClick={handleDeletePackage} block>\n                  Delete Package\n                </Button.Ripple></>}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {\n        isModal && <MakePackage modal={isModal} onToggle={() => setIsModal(!isModal)} />\n      }\n    </div>\n  )\n}\n\nexport default TodoSidebar\n","// ** React Imports\nimport { useState, Fragment, useEffect } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Star, Trash } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { Modal, ModalBody, Button, Form, FormGroup, Input, Label, Row, Col } from 'reactstrap'\n\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n// ** Utils\nimport { isObjEmpty, selectThemeColors } from '@utils'\n\n// ** Styles Imports\nimport '@styles/react/libs/editor/editor.scss'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\n// ** Function to capitalize the first letter of string\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1)\n\n// ** Modal Header\nconst ModalHeader = props => {\n  // ** Props\n  const {\n    children,\n    store,\n    handleTaskSidebar,\n    deleteTask,\n    dispatch\n  } = props\n  const MySwal = withReactContent(Swal)\n\n\n  // ** Function to delete task\n  const handleDeleteTask = () => {\n    // setDeleted(!deleted)\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"Do you buy this package?\",\n      icon: 'info',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, buy this!',\n      customClass: {\n        confirmButton: 'btn btn-info',\n        cancelButton: 'btn btn-outline-danger ml-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        dispatch(deleteTask(store.selectedTask._id))\n        handleTaskSidebar()\n      }\n    })\n  }\n\n  return (\n    <div className='modal-header d-flex align-items-center justify-content-between mb-1'>\n      <h5 className='modal-title'>{children}</h5>\n      <div className='todo-item-action d-flex align-items-center'>\n        {store && !isObjEmpty(store.selectedTask) ? (\n          <Trash className='cursor-pointer mt-25' size={16} onClick={() => handleDeleteTask()} />\n        ) : null}\n        <span className='todo-item-favorite cursor-pointer mx-50'>\n        </span>\n        <X className='font-weight-normal mt-25' size={16} onClick={handleTaskSidebar} />\n      </div>\n    </div>\n  )\n}\n\nconst TaskSidebar = props => {\n  // ** Props\n  const { open, handleTaskSidebar, store, dispatch, updateTask, selectTask, addTask, deleteTask } = props\n\n  // ** Users\n  const [title, setTitle] = useState(''),\n    [inpackage, setInPackage] = useState(\"\"),\n    [budget, setBudget] = useState(''),\n    [userNumber, setUserNumber] = useState(''),\n    [dueDate, setDueDate] = useState(new Date()),\n\n    [token, setTags] = useState([])\n  const tagOptions = [\n    { value: '$', label: 'USD' },\n    { value: 'B', label: 'BSC' },\n    { value: 'W', label: 'Work' }\n  ]\n\n  const handleSidebarTitle = () => {\n    if (store && !isObjEmpty(store.selectedTask)) {\n      return 'Update Task'\n    } else {\n      return 'Add Task'\n    }\n  }\n\n\n  // ** Function to run when sidebar opens\n  const handleSidebarOpened = () => {\n    const { selectedTask } = store\n    if (!isObjEmpty(selectedTask)) {\n      setTitle(selectedTask.title)\n      setBudget(selectedTask.budget)\n      setDueDate(selectedTask.dueDate)\n      setUserNumber(selectedTask.userNumber)\n      setInPackage(selectedTask.inpackage)\n      for (let i = 0; i < tagOptions.length; i++) {\n        if (tagOptions[i].value === selectedTask.tokenType) {\n          setTags(tagOptions[i])\n        }\n      }\n    }\n  }\n\n  // ** Function to run when sidebar closes\n  const handleSidebarClosed = () => {\n    setInPackage([])\n    setUserNumber('')\n    setTitle('')\n    setBudget('')\n    setDueDate(new Date())\n    setTags('')\n    dispatch(selectTask({}))\n  }\n\n  // ** Function to reset fileds\n  const handleResetFields = () => {\n    const { selectedTask } = store\n    setTitle(selectedTask.title)\n    setBudget(selectedTask.budget)\n    for (let i = 0; i < tagOptions.length; i++) {\n      if (tagOptions[i].value === selectedTask.tokenType) {\n        setTags(tagOptions[i])\n      }\n    }\n    setInPackage(selectedTask.inpackage)\n    setDueDate(selectedTask.dueDate)\n    setUserNumber(selectedTask.userNumber)\n\n  }\n\n  // ** Renders Footer Buttons\n  const renderFooterButtons = () => {\n    const state = {\n      _id: store.selectedTask._id,\n      title,\n      budget,\n      userNumber,\n      dueDate,\n      inpackage: inpackage && inpackage.value,\n      tokenType: token && token.value\n    }\n\n    if (store && !isObjEmpty(store.selectedTask)) {\n      return (\n        <Fragment>\n          <Button\n            color='primary'\n            disabled={!(title.length && budget.length)}\n            className='update-btn update-todo-item mr-1'\n            onClick={() => {\n              dispatch(updateTask({ ...state, id: store.selectedTask.id }))\n              handleTaskSidebar()\n            }}\n          >\n            Update\n          </Button>\n          <Button color='secondary' onClick={handleResetFields} outline>\n            Reset\n          </Button>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          <Button\n            color='primary'\n            disabled={!(title.length && budget.length && userNumber.length)}\n            className='add-todo-item mr-1'\n            onClick={() => {\n              dispatch(addTask(state))\n              handleTaskSidebar()\n            }}\n          >\n            Add\n          </Button>\n          <Button color='secondary' onClick={handleTaskSidebar} outline>\n            Cancel\n          </Button>\n        </Fragment>\n      )\n    }\n  }\n  return (\n    <Modal\n      isOpen={open}\n      // toggle={handleTaskSidebar}\n      className='sidebar-lg'\n      contentClassName='p-0'\n      onOpened={handleSidebarOpened}\n      onClosed={handleSidebarClosed}\n      modalClassName='modal-slide-in sidebar-todo-modal'\n    >\n      <Form id='form-modal-todo' className='todo-modal' onSubmit={e => e.preventDefault()}>\n        <ModalHeader\n          store={store}\n          dispatch={dispatch}\n          deleteTask={deleteTask}\n          handleTaskSidebar={handleTaskSidebar}\n        >\n          {handleSidebarTitle()}\n        </ModalHeader>\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n          <FormGroup>\n            <Label className='form-label' for='task-title'>\n              Title <span className='text-danger'>*</span>\n            </Label>\n            <Input\n              id='task-title'\n              value={title}\n              placeholder='Title'\n              className='new-todo-item-title'\n              onChange={e => setTitle(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Row>\n              <Col md=\"7\">\n                <Label className='form-label' for='task-budget'>\n                  Price <span className='text-danger'>*</span>\n                </Label>\n                <Input\n                  id='task-budget'\n                  type='number'\n                  value={budget}\n                  placeholder='Price'\n                  className='new-todo-item-title'\n                  onChange={e => setBudget(e.target.value)}\n                />\n              </Col>\n              <Col md=\"5\">\n                <Label className='form-label' for='task-tags'>\n                  Token Type\n                </Label>\n                <Select\n                  id='task-tags'\n                  className='react-select'\n                  classNamePrefix='select'\n                  isClearable={true}\n                  options={tagOptions}\n                  theme={selectThemeColors}\n                  value={token}\n                  onChange={data => {\n                    setTags(data)\n                  }}\n                />\n              </Col>\n            </Row>\n          </FormGroup>\n          <FormGroup>\n            <Label for='user-number' className='form-label'>\n              Number of Users <span className='text-danger'>*</span>\n            </Label>\n            <Input\n              id='user-number'\n              type='number'\n              value={userNumber}\n              placeholder='Input user number'\n              className='new-todo-item-title'\n              onChange={e => setUserNumber(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='due-date'>\n              Issused Date\n            </Label>\n            <Flatpickr\n              id='due-date'\n              name='due-date'\n              className='form-control'\n              onChange={date => setDueDate(date[0])}\n              value={dueDate}\n              options={{ dateFormat: 'Y-m-d' }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-tags'>\n              Package Name\n            </Label>\n            <Input\n              id='task-tags'\n              value={inpackage}\n              disabled\n            />\n          </FormGroup>\n\n          <FormGroup className='my-1'>{renderFooterButtons()}</FormGroup>\n        </ModalBody>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default TaskSidebar\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\n\n// ** Third Party Components\nimport classnames from 'classnames'\n\n// ** Todo App Components\nimport Tasks from './Tasks'\nimport Sidebar from './Sidebar'\nimport TaskSidebar from './TaskSidebar'\n// import MakePackage from './MakePackage'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getTasks, updateTask, selectTask, addTask, deleteTask, reOrderTasks, setStoreStage, getPackages, deletePackage } from './store/actions'\n\n// ** Styles\nimport '@styles/react/apps/app-todo.scss'\n\nconst TODO = () => {\n    // ** States\n    const [p, setPackage] = useState('')\n    const [pState, setPState] = useState(true)\n    const [pId, setPackageId] = useState('')\n    const [query, setQuery] = useState('')\n    const [mainSidebar, setMainSidebar] = useState(false)\n    const [openTaskSidebar, setOpenTaskSidebar] = useState(false)\n\n    // ** Store Vars\n    const dispatch = useDispatch()\n    const store = useSelector(state => state.todo)\n    // ** URL Params\n    const paramsURL = useParams()\n    const params = {\n        q: query || '',\n        p: p || ''\n    }\n\n    // ** Function to handle Left sidebar & Task sidebar\n    const handleMainSidebar = () => setMainSidebar(!mainSidebar)\n    const handleTaskSidebar = () => setOpenTaskSidebar(!openTaskSidebar)\n\n    // ** Get Tasks on mount & based on dependency change\n    useEffect(() => {\n        // const data = {\n        //     // filter: paramsURL.filter,\n        //     query: query || ''\n        //     // sortBy: sort || ''\n        // }\n\n        dispatch(getTasks(params))\n        dispatch(getPackages())\n    }, [store.tasks.length, query, p])\n\n    return (\n        <Fragment>\n            <Sidebar\n                store={store}\n                params={params}\n                pState={pState}\n                pId={pId}\n                deletePackage={deletePackage}\n                setPState={setPState}\n                setPackage={setPackage}\n                packages={store.packages}\n                getTasks={getTasks}\n                setPackage={setPackage}\n                setStoreStage={setStoreStage}\n                dispatch={dispatch}\n                mainSidebar={mainSidebar}\n                urlFilter={paramsURL.filter}\n                setMainSidebar={setMainSidebar}\n                handleTaskSidebar={handleTaskSidebar}\n            // getPackages={getPackages}\n            />\n            <div className='content-right'>\n                <div className='content-wrapper'>\n                    <div className='content-body'>\n                        <div\n                            className={classnames('body-content-overlay', {\n                                show: mainSidebar === true\n                            })}\n                            onClick={handleMainSidebar}\n                        ></div>\n\n                        {store ? (\n                            <Tasks\n                                store={store}\n                                tasks={store.tasks}\n                                packages={store.packages}\n                                p={pState}\n                                setPackageId={setPackageId}\n                                setPackage={setPackage}\n                                query={query}\n                                params={params}\n                                setQuery={setQuery}\n                                dispatch={dispatch}\n                                getTasks={getTasks}\n                                paramsURL={paramsURL}\n                                updateTask={updateTask}\n                                selectTask={selectTask}\n                                reOrderTasks={reOrderTasks}\n                                handleMainSidebar={handleMainSidebar}\n                                handleTaskSidebar={handleTaskSidebar}\n                            />\n                        ) : null}\n\n                        <TaskSidebar\n                            store={store}\n                            params={params}\n                            addTask={addTask}\n                            dispatch={dispatch}\n                            open={openTaskSidebar}\n                            updateTask={updateTask}\n                            selectTask={selectTask}\n                            deleteTask={deleteTask}\n                            handleTaskSidebar={handleTaskSidebar}\n                        />\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default TODO\n","// ** Third Party Components\nimport PropTypes from 'prop-types'\n\nconst Repeater = props => {\n  // ** Props\n  const { count, tag, component, children, ...rest } = props\n\n  // ** Custom Tag\n  const Tag = tag\n\n  // ** Default Items\n  const items = []\n\n  // ** Loop passed count times and push it in items Array\n  for (let i = 0; i < count; i++) {\n    items.push(children(i))\n  }\n\n  return <Tag {...rest}>{items}</Tag>\n}\n\n// ** PropTypes\nRepeater.propTypes = {\n  count: PropTypes.number.isRequired,\n  tag: PropTypes.string.isRequired\n}\n\n// ** Default Props\nRepeater.defaultProps = {\n  tag: 'div'\n}\n\nexport default Repeater\n","import axios from 'axios'\nimport { Fragment } from 'react'\nconst Baseurl = 'http://localhost:3997/api/'\n// const Baseurl = 'https://adworks.app/api/'\nimport { toast, Slide } from 'react-toastify'\nimport { getProducts } from '@src/views/apps/ecommerce/store/actions'\n\nconst ToastContent = ({ title, text }) => (\n    <Fragment>\n        <div className='toastify-header'>\n            <div className='title-wrapper'>\n                <h6 className='toast-title font-weight-bold'>Success, {title}</h6>\n            </div>\n        </div>\n        <div className='toastify-body'>\n            <span>{text ? text : 'You have successfully added your task in database!'}</span>\n        </div>\n    </Fragment>\n)\n\n\n// ** Get Tasks\nexport const getTasks = params => {\n    return dispatch => {\n        return axios.post(`${Baseurl}/jobs/getTasks`, params).then(res => {\n            dispatch({\n                type: 'GET_TASKS',\n                tasks: res.data.data,\n                params\n            })\n        })\n    }\n}\nexport const getTasksC = params => {\n    return dispatch => {\n        return axios.post(`${Baseurl}/jobs/getTasks`, params).then(res => {\n            dispatch(getProducts(res.data.data, params, res.data.totalNum))\n        })\n    }\n}\n\nexport const setStoreStage = (stage) => {\n    return dispatch => {\n        dispatch({\n            type: 'SET_STAGE',\n            stage\n        })\n    }\n}\n\n// ** Re-order Tasks on drag\nexport const reOrderTasks = tasks => dispatch => dispatch({ type: 'REORDER_TASKS', tasks })\n\n// ** ADD Task\nexport const addTask = task => {\n    return (dispatch, getState) => {\n        axios\n            .post(`${Baseurl}/jobs/addTask`, { task })\n            .then(res => {\n                dispatch({\n                    type: 'ADD_TASK',\n                    task: res.data\n                })\n                toast.success(\n                    <ToastContent title={res.data.title} />,\n                    { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n                )\n            })\n            .then(dispatch(getTasks(getState().todo.params)))\n    }\n}\n\n// ** Update Tasks\nexport const updateTask = task => {\n    return (dispatch, getState) => {\n        axios\n            .post(`${Baseurl}/jobs/updateTask`, { task })\n            .then(res => {\n                dispatch({\n                    type: 'UPDATE_TASK',\n                    task: res.data\n                })\n                toast.success(\n                    <ToastContent title={res.data.title} text={'You have successfully updated your task in database!'} />,\n                    { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n                )\n            })\n            .then(dispatch(getTasks(getState().todo.params)))\n    }\n}\n\n// ** Delete Task\nexport const deleteTask = taskId => {\n    return (dispatch, getState) => {\n        axios\n            .post(`${Baseurl}/jobs/deleteTask`, { taskId })\n            .then(res => {\n                dispatch({\n                    type: 'DELETE_TASK',\n                    task: res.data\n                })\n                toast.success(\n                    <ToastContent title={res.data.title} text={'You have successfully deleted your task in database!'} />,\n                    { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n                )\n            })\n            .then(() => dispatch(getTasks(getState().todo.params)))\n    }\n}\n\n// ** Select Task\nexport const selectTask = task => dispatch => dispatch({ type: 'SELECT_TASK', task })\n\n\nexport const getPackages = () => {\n    return dispatch => {\n        return axios.get(`${Baseurl}/jobs/getPackages`).then(res => {\n            dispatch({\n                type: 'GET_PACAKGES',\n                packages: res.data.packages\n            })\n        })\n    }\n}\nexport const makePackage = dataArr => {\n    return (dispatch, getState) => {\n        axios.post(`${Baseurl}/jobs/makePackage`, { dataArr }).then(res => {\n            dispatch(getPackages(getState().todo.params))\n\n            toast.success(\n                <ToastContent title={res.data.title} text={'You have successfully deleted your task in database!'} />,\n                { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n            )\n        })\n    }\n}\n\nexport const deletePackage = (id) => {\n    return (dispatch, getState) => {\n        return axios.post(`${Baseurl}/jobs/deletePackages`, { id }).then(res => {\n            dispatch(getPackages(getState().todo.params))\n            toast.success(\n                <ToastContent title={res.data.title} text={'You have successfully deleted your package in database!'} />,\n                { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n            )\n\n        })\n    }\n}\n"],"sourceRoot":""}